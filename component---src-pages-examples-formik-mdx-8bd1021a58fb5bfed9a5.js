"use strict";(self.webpackChunkreact_netlify_forms_www=self.webpackChunkreact_netlify_forms_www||[]).push([[573],{43420:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return a},default:function(){return s}});var r=t(63366),i=(t(27378),t(64983)),o=["components"],a={title:"Formik newsletter example"},l={_frontmatter:a};function s(e){var n=e.components,t=(0,r.Z)(e,o);return(0,i.kt)("wrapper",Object.assign({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"formik-newsletter-example"},"Formik newsletter example"),(0,i.kt)("p",null,"In this example we will create a simple newsletter signup form with Formik. It only includes an email field which is validated client-side (note: client-side validation is not safe, thus you might see data other than emails in Netlify)."),(0,i.kt)("p",null,"In order to use Formik's handlers, we use a hook-based approach which allows us to link Formik's submit handler with react-netlify-forms one. Therefore, we have to import ",(0,i.kt)("inlineCode",{parentName:"p"},"useNetlifyForm")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"useFormik"),". Furthermore, we have to use ",(0,i.kt)("inlineCode",{parentName:"p"},"NetlifyFormProvider")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"NetlifyFormComponent")," to render the form with context ourselves:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  useNetlifyForm,\n  NetlifyFormProvider,\n  NetlifyFormComponent,\n  Honeypot\n} from 'react-netlify-forms'\nimport { useFormik } from 'formik'\n")),(0,i.kt)("p",null,"First, we get all Netlify Forms functions through ",(0,i.kt)("inlineCode",{parentName:"p"},"useNetlifyForm")," and then setup Formik with ",(0,i.kt)("inlineCode",{parentName:"p"},"useFormik"),". We supply the former submit handler to Formik's ",(0,i.kt)("inlineCode",{parentName:"p"},"onSubmit")," to link them which means that the form is validated by Formik and then values are sent to the server by react-netlify-forms."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"NetlifyFormProvider")," enables us to create the corresponding context by passing Netlify functions through props. In the following, the context is consumed by ",(0,i.kt)("inlineCode",{parentName:"p"},"NetlifyFormComponent")," to render a form with all neccessary attributes."),(0,i.kt)("p",null,"Instead of managing form state through react-netlify-forms, it is now controlled by Formik with e.g. ",(0,i.kt)("inlineCode",{parentName:"p"},"handleChange"),"."),(0,i.kt)("p",null,"Last but not least, note that we defined validation logic in Formik as a simple check whether input is filled and it matches a regular expression describing emails."),(0,i.kt)("p",null,"See the full example in action here:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function NewsletterForm() {\n  const netlify = useNetlifyForm({\n    name: 'Formik',\n    action: '/thanks',\n    honeypotName: 'bot-field',\n    onSuccess: (response, context) => {\n      console.log('Successfully sent form data to Netlify Server')\n    }\n  })\n  const {\n    handleSubmit,\n    handleChange,\n    handleBlur,\n    touched,\n    errors,\n    values\n  } = useFormik({\n    initialValues: { email: '' },\n    onSubmit: (values) => netlify.handleSubmit(null, values),\n    validate: (values) => {\n      const errors = {}\n      if (!values.email) {\n        errors.email = 'Email is required'\n      } else if (\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n      ) {\n        errors.email = 'Invalid email address'\n      }\n      return errors\n    }\n  })\n\n  return (\n    <NetlifyFormProvider {...netlify}>\n      <NetlifyFormComponent onSubmit={handleSubmit}>\n        <Honeypot />\n        {netlify.success && (\n          <p sx={{ variant: 'alerts.success', p: 3 }}>\n            Thanks for contacting us!\n          </p>\n        )}\n        {netlify.error && (\n          <p sx={{ variant: 'alerts.muted', p: 3 }}>\n            Sorry, we could not reach servers. Because it only works on Netlify,\n            our GitHub demo does not provide a response.\n          </p>\n        )}\n        <div>\n          <label htmlFor='email' sx={{ variant: 'forms.label' }}>\n            Email:\n          </label>\n          <input\n            type='email'\n            name='email'\n            id='email'\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n            sx={{\n              variant: 'forms.input'\n            }}\n          />\n          {touched.email && errors.email ? (\n            <div sx={{ variant: 'text.error' }}>{errors.email}</div>\n          ) : null}\n        </div>\n        <div sx={{ pt: 3 }}>\n          <button type='submit' sx={{ variant: 'buttons.success' }}>\n            Submit\n          </button>\n          <button type='reset' sx={{ variant: 'buttons.danger' }}>\n            Reset\n          </button>\n        </div>\n      </NetlifyFormComponent>\n    </NetlifyFormProvider>\n  )\n}\n")))}s.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-examples-formik-mdx-8bd1021a58fb5bfed9a5.js.map