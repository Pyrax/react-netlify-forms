{"version":3,"sources":["../../src/netlify-form-context.js","../../src/honeypot.js","../../src/utils.js","../../src/netlify-form-reducer.js","../../src/netlify-form.js","App.js","theme.js","index.js"],"names":["NetlifyFormContext","React","NetlifyFormProvider","Provider","Consumer","useNetlifyFormContext","Honeypot","name","label","handleChange","setHoneypot","hidden","onChange","ref","encodeFormData","data","formData","Object","key","action","value","state","initialData","honeypot","payload","recaptcha","recaptchaInvisible","Error","NetlifyForm","children","props","context","onFormDataSent","initialValues","initialState","dispatch","target","files","type","handleSubmit","event","form","fetch","method","body","handleReset","setRecaptcha","setRecaptchaInvisible","invisible","useNetlifyForm","childProps","onSubmit","onReset","data-netlify","data-netlify-honeypot","Boolean","data-netlify-recaptcha","isFunction","x","isEmptyChildren","App","p","res","console","log","pt","as","Textarea","variant","mr","sketchy","ReactDOM","render","theme","document","getElementById"],"mappings":"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","file":"static/js/main.651f8232.chunk.js","sourcesContent":["import React from 'react'\n\nexport const NetlifyFormContext = React.createContext()\nexport const NetlifyFormProvider = NetlifyFormContext.Provider\nexport const NetlifyFormConsumer = NetlifyFormContext.Consumer\n\nexport function useNetlifyFormContext() {\n  return React.useContext(NetlifyFormContext)\n}\n","import React from 'react'\nimport { useNetlifyFormContext } from './netlify-form-context'\n\nexport const Honeypot = ({\n  name = '__honeypot',\n  label = `Don't fill out the following field:`\n}) => {\n  const { handleChange, setHoneypot } = useNetlifyFormContext()\n\n  return (\n    <p hidden>\n      <label>\n        {label} <input name={name} onChange={handleChange} ref={setHoneypot} />\n      </label>\n    </p>\n  )\n}\n","import React from 'react'\n\nexport const encodeFormData = (data) => {\n  const formData = new FormData()\n\n  for (const key of Object.keys(data)) {\n    formData.append(key, data[key])\n  }\n\n  return formData\n}\n\nexport const isFunction = (x) => typeof x === 'function'\n\nexport const isEmptyChildren = (x) => React.Children.count(x) === 0\n","export default function (state, action) {\n  switch (action.type) {\n    case 'FORM_DATA_CHANGED':\n      const { name, value } = action.payload\n      return {\n        ...state,\n        formData: {\n          ...state.formData,\n          [name]: value\n        }\n      }\n    case 'FORM_RESET':\n      const initialData = action.payload\n      return {\n        ...state,\n        formData: initialData\n      }\n    case 'HONEYPOT_SET':\n      return { ...state, honeypot: action.payload }\n    case 'RECAPTCHA_SET':\n      return { ...state, recaptcha: action.payload }\n    case 'RECAPTCHA_VISIBILITY_CHANGED':\n      return { ...state, recaptchaInvisible: action.payload }\n    default:\n      throw new Error(`Action type \"${action.type}\" is not defined.`)\n  }\n}\n","import React from 'react'\nimport { encodeFormData, isFunction, isEmptyChildren } from './utils'\nimport NetlifyFormReducer from './netlify-form-reducer'\nimport { NetlifyFormProvider } from './netlify-form-context'\n\nexport function useNetlifyForm({ onFormDataSent }) {\n  const initialValues = {}\n  const initialState = {\n    formData: initialValues,\n    honeypot: null,\n    recaptcha: null,\n    recaptchaInvisible: true\n  }\n  const [state, dispatch] = React.useReducer(NetlifyFormReducer, initialState)\n\n  const handleChange = ({ target: { name, value, files } }) => {\n    dispatch({\n      type: 'FORM_DATA_CHANGED',\n      payload:\n        files != null && files.length > 0\n          ? { name, value: files[0] }\n          : { name, value }\n    })\n  }\n  const handleReset = () => {\n    dispatch({\n      type: 'FORM_RESET',\n      payload: initialValues\n    })\n  }\n  const handleSubmit = async (event) => {\n    // TODO: add recaptcha, make sure invisible recaptchas are handled\n    // as well!\n    event.preventDefault()\n    const form = event.target\n    const result = await fetch('/', {\n      method: 'POST',\n      body: encodeFormData({\n        'form-name': form.getAttribute('name'),\n        ...state.formData\n      })\n    })\n    onFormDataSent(result)\n  }\n  const setHoneypot = (ref) => {\n    if (ref !== state.honeypot) {\n      return dispatch({ type: 'HONEYPOT_SET', payload: ref })\n    }\n  }\n  const setRecaptcha = (ref) => {\n    if (ref !== state.recaptcha) {\n      return dispatch({ type: 'RECAPTCHA_SET', payload: ref })\n    }\n  }\n  const setRecaptchaInvisible = (invisible) => {\n    if (invisible !== state.recaptchaInvisible) {\n      return dispatch({\n        type: 'RECAPTCHA_VISIBILITY_CHANGED',\n        payload: invisible\n      })\n    }\n  }\n\n  return {\n    ...state,\n    handleChange,\n    handleSubmit,\n    handleReset,\n    setHoneypot,\n    setRecaptcha,\n    setRecaptchaInvisible\n  }\n}\n\nexport const NetlifyForm = ({ children, ...props }) => {\n  const context = useNetlifyForm(props)\n\n  const { name, action, onFormDataSent, ...childProps } = props\n  return (\n    <NetlifyFormProvider value={context}>\n      <form\n        {...childProps}\n        name={name}\n        action={action}\n        method='post'\n        onSubmit={context.handleSubmit}\n        onReset={context.handleReset}\n        data-netlify={true}\n        data-netlify-honeypot={Boolean(context.honeypot)}\n        data-netlify-recaptcha={Boolean(context.recaptcha)}\n      >\n        {/* The `form-name` hidden field is required to support form submissions without JavaScript */}\n        <input type='hidden' name='form-name' value={name} />\n\n        {children\n          ? isFunction(children)\n            ? children(context)\n            : !isEmptyChildren(children)\n            ? React.Children.only(children)\n            : null\n          : null}\n      </form>\n    </NetlifyFormProvider>\n  )\n}\n","/** @jsx jsx */\nimport { jsx, Button, Box, Container, Field, Heading, Textarea } from 'theme-ui'\nimport { NetlifyForm, Honeypot, Recaptcha } from 'react-netlify-forms'\nimport 'typeface-architects-daughter'\n\nconst App = () => (\n  <Container p={[2, null, 5]}>\n    <NetlifyForm\n      name='Contact'\n      action='/thanks'\n      onFormDataSent={(res) => {\n        console.log('Successfully sent form data to Netlify Server' + res)\n      }}\n    >\n      {({ handleChange }) => (\n        <Box>\n          <Honeypot name='bot-field' label='Leave this field empty:' />\n          {/*<Recaptcha siteKey='ejqoweo' invisible={true} />*/}\n\n          <Heading>Contact form example</Heading>\n\n          <Box pt={2}>\n            <Field label='Name:' name='name' onChange={handleChange} />\n          </Box>\n          <Box pt={2}>\n            <Field\n              as={Textarea}\n              label='Message:'\n              name='message'\n              onChange={handleChange}\n            />\n          </Box>\n\n          <Box pt={3}>\n            <Button type='submit' variant='success' mr={2}>\n              Submit\n            </Button>\n            <Button type='reset' variant='danger'>\n              Reset\n            </Button>\n          </Box>\n        </Box>\n      )}\n    </NetlifyForm>\n\n    {/*<NetlifyForm\n      name='Message'\n      action='/msg'\n      onFormDataSent={(res) => {\n        console.log('Successfully sent message to Netlify Server' + res)\n      }}\n    >\n      {({ handleChange }) => (\n        <Box>\n          <div>\n            <Label htmlFor='input-message'>Message:</Label>\n            <Textarea\n              name='message'\n              id='input-message'\n              onChange={handleChange}\n            />\n          </div>\n\n          <Button type='submit' variant='success'>\n            Submit\n          </Button>\n          <Button type='reset' variant='danger'>\n            Reset\n          </Button>\n        </Box>\n      )}\n      </NetlifyForm>*/}\n  </Container>\n)\n\nexport default App\n","import sketchy from 'theme-ui-sketchy-preset'\n\nexport default sketchy\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport theme from './theme'\nimport { ThemeProvider } from 'theme-ui'\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}