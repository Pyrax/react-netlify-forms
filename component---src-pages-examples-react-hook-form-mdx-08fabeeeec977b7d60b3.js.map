{"version":3,"file":"component---src-pages-examples-react-hook-form-mdx-08fabeeeec977b7d60b3.js","mappings":"6QAOaA,EAAe,CAC1B,MAAS,2BAELC,EAAc,CAClBD,aAAAA,GAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAC5E,cACE,GAAM,2BADR,4BAGA,2QACA,8FAAgF,sBAAYC,WAAW,KAAvB,kBAAhF,SAAmJ,sBAAYA,WAAW,KAAvB,WAAnJ,kCAAwO,sBAAYA,WAAW,KAAvB,uBAAxO,SAAgT,sBAAYA,WAAW,KAAvB,wBAAhT,gDACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eADZ,yKAUL,+EAAiE,sBAAYA,WAAW,KAAvB,WAAjE,6EAAiM,sBAAYA,WAAW,KAAvB,kBAAjM,gOAA2d,sBAAYA,WAAW,KAAvB,YAA3d,qCACA,kBAAG,sBAAYA,WAAW,KAAvB,uBAAH,6IAA+M,sBAAYA,WAAW,KAAvB,wBAA/M,yFACA,6RACA,0DACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACb,WAAc,OACd,MAAQ,GAHP,yjEA2ER,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://react-netlify-forms-www/./src/pages/examples/react-hook-form.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"react-hook-form example\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"react-hook-form-example\"\n    }}>{`react-hook-form example`}</h1>\n    <p>{`In this example we will create a simple newsletter signup form with react-hook-form. It only includes an email field which is validated client-side (note: client-side validation is not safe, thus you might see data other than emails in Netlify).`}</p>\n    <p>{`react-hook-form takes a hook-base approach. Therefore, we have to import `}<inlineCode parentName=\"p\">{`useNetlifyForm`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`useForm`}</inlineCode>{`. Furthermore, we have to use `}<inlineCode parentName=\"p\">{`NetlifyFormProvider`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`NetlifyFormComponent`}</inlineCode>{` to render the form with context ourselves:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  useNetlifyForm,\n  NetlifyFormProvider,\n  NetlifyFormComponent,\n  Honeypot\n} from 'react-netlify-forms'\nimport { useForm } from 'react-hook-form'\n`}</code></pre>\n    <p>{`First, we will set react-hook-form up by calling the hook `}<inlineCode parentName=\"p\">{`useForm`}</inlineCode>{` with our desired options. Then do the same for react-netlify-forms with `}<inlineCode parentName=\"p\">{`useNetlifyForm`}</inlineCode>{`. We link the submit handler from react-hook-form which validates our input with react-netlify-forms with the one from react-netlify-forms which sends the values to the server. Later, we will pass this custom handler to `}<inlineCode parentName=\"p\">{`onSubmit`}</inlineCode>{` directly to the form component.`}</p>\n    <p><inlineCode parentName=\"p\">{`NetlifyFormProvider`}</inlineCode>{` enables us to create the corresponding context by passing Netlify functions through props. In the following, the context is consumed by `}<inlineCode parentName=\"p\">{`NetlifyFormComponent`}</inlineCode>{` to render a form with all neccessary attributes including our custom submit method.`}</p>\n    <p>{`Instead of managing form state through react-netlify-forms, it is now controlled by react-hook-form. Validation logic is defined when registering an input. In this example, we only have one email input set as required and check if it matches a regular expression.`}</p>\n    <p>{`See the full example in action here:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`function NewsletterForm() {\n  const { register, handleSubmit, reset, errors } = useForm({ mode: 'onBlur' })\n  const netlify = useNetlifyForm({\n    name: 'react-hook-form',\n    action: '/thanks',\n    honeypotName: 'bot-field',\n    onSuccess: (response, context) => {\n      console.log('Successfully sent form data to Netlify Server')\n    }\n  })\n  const onSubmit = (data) => netlify.handleSubmit(null, data)\n\n  const EMAIL_REGEX = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,4}$/i\n\n  return (\n    <NetlifyFormProvider {...netlify}>\n      <NetlifyFormComponent onSubmit={handleSubmit(onSubmit)}>\n        <Honeypot />\n        {netlify.success && (\n          <p sx={{ variant: 'alerts.success', p: 3 }}>\n            Thanks for contacting us!\n          </p>\n        )}\n        {netlify.error && (\n          <p sx={{ variant: 'alerts.muted', p: 3 }}>\n            Sorry, we could not reach servers. Because it only works on Netlify,\n            our GitHub demo does not provide a response.\n          </p>\n        )}\n        <div>\n          <label htmlFor='email' sx={{ variant: 'forms.label' }}>\n            Email:\n          </label>\n          <input\n            type='email'\n            name='email'\n            id='email'\n            ref={register({\n              required: 'Email is required',\n              pattern: {\n                value: EMAIL_REGEX,\n                message: 'Invalid email address'\n              }\n            })}\n            sx={{\n              variant: 'forms.input'\n            }}\n          />\n          {errors.email && (\n            <div sx={{ variant: 'text.error' }}>{errors.email.message}</div>\n          )}\n        </div>\n        <div sx={{ pt: 3 }}>\n          <button type='submit' sx={{ variant: 'buttons.success' }}>\n            Submit\n          </button>\n          <button\n            type='reset'\n            onClick={() => reset()}\n            sx={{ variant: 'buttons.danger' }}\n          >\n            Reset\n          </button>\n        </div>\n      </NetlifyFormComponent>\n    </NetlifyFormProvider>\n  )\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}