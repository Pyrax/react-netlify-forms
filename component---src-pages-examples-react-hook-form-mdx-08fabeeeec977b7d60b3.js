"use strict";(self.webpackChunkreact_netlify_forms_www=self.webpackChunkreact_netlify_forms_www||[]).push([[900],{70277:function(e,n,t){t.r(n),t.d(n,{_frontmatter:function(){return a},default:function(){return l}});var o=t(63366),r=(t(27378),t(64983)),i=["components"],a={title:"react-hook-form example"},s={_frontmatter:a};function l(e){var n=e.components,t=(0,o.Z)(e,i);return(0,r.kt)("wrapper",Object.assign({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"react-hook-form-example"},"react-hook-form example"),(0,r.kt)("p",null,"In this example we will create a simple newsletter signup form with react-hook-form. It only includes an email field which is validated client-side (note: client-side validation is not safe, thus you might see data other than emails in Netlify)."),(0,r.kt)("p",null,"react-hook-form takes a hook-base approach. Therefore, we have to import ",(0,r.kt)("inlineCode",{parentName:"p"},"useNetlifyForm")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm"),". Furthermore, we have to use ",(0,r.kt)("inlineCode",{parentName:"p"},"NetlifyFormProvider")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"NetlifyFormComponent")," to render the form with context ourselves:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  useNetlifyForm,\n  NetlifyFormProvider,\n  NetlifyFormComponent,\n  Honeypot\n} from 'react-netlify-forms'\nimport { useForm } from 'react-hook-form'\n")),(0,r.kt)("p",null,"First, we will set react-hook-form up by calling the hook ",(0,r.kt)("inlineCode",{parentName:"p"},"useForm")," with our desired options. Then do the same for react-netlify-forms with ",(0,r.kt)("inlineCode",{parentName:"p"},"useNetlifyForm"),". We link the submit handler from react-hook-form which validates our input with react-netlify-forms with the one from react-netlify-forms which sends the values to the server. Later, we will pass this custom handler to ",(0,r.kt)("inlineCode",{parentName:"p"},"onSubmit")," directly to the form component."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"NetlifyFormProvider")," enables us to create the corresponding context by passing Netlify functions through props. In the following, the context is consumed by ",(0,r.kt)("inlineCode",{parentName:"p"},"NetlifyFormComponent")," to render a form with all neccessary attributes including our custom submit method."),(0,r.kt)("p",null,"Instead of managing form state through react-netlify-forms, it is now controlled by react-hook-form. Validation logic is defined when registering an input. In this example, we only have one email input set as required and check if it matches a regular expression."),(0,r.kt)("p",null,"See the full example in action here:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"function NewsletterForm() {\n  const { register, handleSubmit, reset, errors } = useForm({ mode: 'onBlur' })\n  const netlify = useNetlifyForm({\n    name: 'react-hook-form',\n    action: '/thanks',\n    honeypotName: 'bot-field',\n    onSuccess: (response, context) => {\n      console.log('Successfully sent form data to Netlify Server')\n    }\n  })\n  const onSubmit = (data) => netlify.handleSubmit(null, data)\n\n  const EMAIL_REGEX = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+.[A-Z]{2,4}$/i\n\n  return (\n    <NetlifyFormProvider {...netlify}>\n      <NetlifyFormComponent onSubmit={handleSubmit(onSubmit)}>\n        <Honeypot />\n        {netlify.success && (\n          <p sx={{ variant: 'alerts.success', p: 3 }}>\n            Thanks for contacting us!\n          </p>\n        )}\n        {netlify.error && (\n          <p sx={{ variant: 'alerts.muted', p: 3 }}>\n            Sorry, we could not reach servers. Because it only works on Netlify,\n            our GitHub demo does not provide a response.\n          </p>\n        )}\n        <div>\n          <label htmlFor='email' sx={{ variant: 'forms.label' }}>\n            Email:\n          </label>\n          <input\n            type='email'\n            name='email'\n            id='email'\n            ref={register({\n              required: 'Email is required',\n              pattern: {\n                value: EMAIL_REGEX,\n                message: 'Invalid email address'\n              }\n            })}\n            sx={{\n              variant: 'forms.input'\n            }}\n          />\n          {errors.email && (\n            <div sx={{ variant: 'text.error' }}>{errors.email.message}</div>\n          )}\n        </div>\n        <div sx={{ pt: 3 }}>\n          <button type='submit' sx={{ variant: 'buttons.success' }}>\n            Submit\n          </button>\n          <button\n            type='reset'\n            onClick={() => reset()}\n            sx={{ variant: 'buttons.danger' }}\n          >\n            Reset\n          </button>\n        </div>\n      </NetlifyFormComponent>\n    </NetlifyFormProvider>\n  )\n}\n")))}l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-examples-react-hook-form-mdx-08fabeeeec977b7d60b3.js.map