{"version":3,"sources":["webpack:///./src/pages/examples/formik.mdx"],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"+OAKO,IAAMA,EAAe,CAC1B,MAAS,6BAQLC,EAAc,CAClBD,gBAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAC5E,iBAAQ,CACN,GAAM,6BADR,6BAGA,qQACA,mMAAkL,0BAAYC,WAAW,KAAvB,kBAAlL,QAAqP,0BAAYA,WAAW,KAAvB,aAArP,iCAA4U,0BAAYA,WAAW,KAAvB,uBAA5U,QAAoZ,0BAAYA,WAAW,KAAvB,wBAApZ,+CACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iKAUL,0EAAyD,0BAAYA,WAAW,KAAvB,kBAAzD,+BAAmJ,0BAAYA,WAAW,KAAvB,aAAnJ,qDAA8P,0BAAYA,WAAW,KAAvB,YAA9P,iIACA,qBAAG,0BAAYA,WAAW,KAAvB,uBAAH,4IAA+M,0BAAYA,WAAW,KAAvB,wBAA/M,qDACA,6HAA4G,0BAAYA,WAAW,KAAvB,gBAA5G,KACA,6LACA,6DACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,eACb,WAAc,OACd,MAAQ,IAHP,gsEAuFTJ,EAAWK,gBAAiB","file":"component---src-pages-examples-formik-mdx-baf2a155cf1765ddfc48.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Formik newsletter example\"\n};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"formik-newsletter-example\"\n    }}>{`Formik newsletter example`}</h1>\n    <p>{`In this example we will create a simple newsletter signup form with Formik. It only includes an email field which is validated client-side (note: client-side validation is not safe, thus you might see data other than emails in Netlify).`}</p>\n    <p>{`In order to use Formik's handlers, we use a hook-based approach which allows us to link Formik's submit handler with react-netlify-forms one. Therefore, we have to import `}<inlineCode parentName=\"p\">{`useNetlifyForm`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`useFormik`}</inlineCode>{`. Furthermore, we have to use `}<inlineCode parentName=\"p\">{`NetlifyFormProvider`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`NetlifyFormComponent`}</inlineCode>{` to render the form with context ourselves:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import {\n  useNetlifyForm,\n  NetlifyFormProvider,\n  NetlifyFormComponent,\n  Honeypot\n} from 'react-netlify-forms'\nimport { useFormik } from 'formik'\n`}</code></pre>\n    <p>{`First, we get all Netlify Forms functions through `}<inlineCode parentName=\"p\">{`useNetlifyForm`}</inlineCode>{` and then setup Formik with `}<inlineCode parentName=\"p\">{`useFormik`}</inlineCode>{`. We supply the former submit handler to Formik's `}<inlineCode parentName=\"p\">{`onSubmit`}</inlineCode>{` to link them which means that the form is validated by Formik and then values are sent to the server by react-netlify-forms.`}</p>\n    <p><inlineCode parentName=\"p\">{`NetlifyFormProvider`}</inlineCode>{` enables us to create the corresponding context by passing Netlify functions through props. In the following, the context is consumed by `}<inlineCode parentName=\"p\">{`NetlifyFormComponent`}</inlineCode>{` to render a form with all neccessary attributes.`}</p>\n    <p>{`Instead of managing form state through react-netlify-forms, it is now controlled by Formik with e.g. `}<inlineCode parentName=\"p\">{`handleChange`}</inlineCode>{`.`}</p>\n    <p>{`Last but not least, note that we defined validation logic in Formik as a simple check whether input is filled and it matches a regular expression describing emails.`}</p>\n    <p>{`See the full example in action here:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`function NewsletterForm() {\n  const netlify = useNetlifyForm({\n    name: 'Formik',\n    action: '/thanks',\n    honeypotName: 'bot-field',\n    onSuccess: (response, context) => {\n      console.log('Successfully sent form data to Netlify Server')\n    }\n  })\n  const {\n    handleSubmit,\n    handleChange,\n    handleBlur,\n    touched,\n    errors,\n    values\n  } = useFormik({\n    initialValues: { email: '' },\n    onSubmit: (values) => netlify.handleSubmit(null, values),\n    validate: (values) => {\n      const errors = {}\n      if (!values.email) {\n        errors.email = 'Email is required'\n      } else if (\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,4}$/i.test(values.email)\n      ) {\n        errors.email = 'Invalid email address'\n      }\n      return errors\n    }\n  })\n\n  return (\n    <NetlifyFormProvider {...netlify}>\n      <NetlifyFormComponent onSubmit={handleSubmit}>\n        <Honeypot />\n        {netlify.success && (\n          <p sx={{ variant: 'alerts.success', p: 3 }}>\n            Thanks for contacting us!\n          </p>\n        )}\n        {netlify.error && (\n          <p sx={{ variant: 'alerts.muted', p: 3 }}>\n            Sorry, we could not reach servers. Because it only works on Netlify,\n            our GitHub demo does not provide a response.\n          </p>\n        )}\n        <div>\n          <label htmlFor='email' sx={{ variant: 'forms.label' }}>\n            Email:\n          </label>\n          <input\n            type='email'\n            name='email'\n            id='email'\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n            sx={{\n              variant: 'forms.input'\n            }}\n          />\n          {touched.email && errors.email ? (\n            <div sx={{ variant: 'text.error' }}>{errors.email}</div>\n          ) : null}\n        </div>\n        <div sx={{ pt: 3 }}>\n          <button type='submit' sx={{ variant: 'buttons.success' }}>\n            Submit\n          </button>\n          <button type='reset' sx={{ variant: 'buttons.danger' }}>\n            Reset\n          </button>\n        </div>\n      </NetlifyFormComponent>\n    </NetlifyFormProvider>\n  )\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}