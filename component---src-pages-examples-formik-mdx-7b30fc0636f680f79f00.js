(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{SJLB:function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return i})),t.d(n,"default",(function(){return a}));t("rGqo"),t("Btvt"),t("91GP"),t("mXGw");var r=t("7ljp");var i={title:"Formik newsletter example"},o={_frontmatter:i};function a(e){var n=e.components,t=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,["components"]);return Object(r.b)("wrapper",Object.assign({},o,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"formik-newsletter-example"},"Formik newsletter example"),Object(r.b)("p",null,"In this example we will create a simple newsletter signup form with Formik. It only includes an email field which is validated client-side (note: client-side validation is not safe, thus you might see data other than emails in Netlify)."),Object(r.b)("p",null,"In order to use Formik's handlers, we use a hook-based approach which allows us to link Formik's submit handler with react-netlify-forms one. Therefore, we have to import ",Object(r.b)("inlineCode",{parentName:"p"},"useNetlifyForm")," and ",Object(r.b)("inlineCode",{parentName:"p"},"useFormik"),". Furthermore, we have to use ",Object(r.b)("inlineCode",{parentName:"p"},"NetlifyFormProvider")," and ",Object(r.b)("inlineCode",{parentName:"p"},"NetlifyFormComponent")," to render the form with context ourselves:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-js"}),"import {\n  useNetlifyForm,\n  NetlifyFormProvider,\n  NetlifyFormComponent,\n  Honeypot\n} from 'react-netlify-forms'\nimport { useFormik } from 'formik'\n")),Object(r.b)("p",null,"First, we get all Netlify Forms functions through ",Object(r.b)("inlineCode",{parentName:"p"},"useNetlifyForm")," and then setup Formik with ",Object(r.b)("inlineCode",{parentName:"p"},"useFormik"),". We supply the former submit handler to Formik's ",Object(r.b)("inlineCode",{parentName:"p"},"onSubmit")," to link them which means that the form is validated by Formik and then values are sent to the server by react-netlify-forms."),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"NetlifyFormProvider")," enables us to create the corresponding context by passing Netlify functions through props. In the following, the context is consumed by ",Object(r.b)("inlineCode",{parentName:"p"},"NetlifyFormComponent")," to render a form with all neccessary attributes."),Object(r.b)("p",null,"Instead of managing form state through react-netlify-forms, it is now controlled by Formik with e.g. ",Object(r.b)("inlineCode",{parentName:"p"},"handleChange"),"."),Object(r.b)("p",null,"Last but not least, note that we defined validation logic in Formik as a simple check whether input is filled and it matches a regular expression describing emails."),Object(r.b)("p",null,"See the full example in action here:"),Object(r.b)("pre",null,Object(r.b)("code",Object.assign({parentName:"pre"},{className:"language-jsx",metastring:"live",live:!0}),"function NewsletterForm() {\n  const netlify = useNetlifyForm({\n    name: 'Formik',\n    action: '/thanks',\n    honeypotName: 'bot-field',\n    onSuccess: (response, context) => {\n      console.log('Successfully sent form data to Netlify Server')\n    }\n  })\n  const {\n    handleSubmit,\n    handleChange,\n    handleBlur,\n    touched,\n    errors,\n    values\n  } = useFormik({\n    initialValues: { email: '' },\n    onSubmit: (values) => netlify.handleSubmit(null, values),\n    validate: (values) => {\n      const errors = {}\n      if (!values.email) {\n        errors.email = 'Email is required'\n      } else if (\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n      ) {\n        errors.email = 'Invalid email address'\n      }\n      return errors\n    }\n  })\n\n  return (\n    <NetlifyFormProvider {...netlify}>\n      <NetlifyFormComponent onSubmit={handleSubmit}>\n        <Honeypot />\n        {netlify.success && (\n          <p sx={{ variant: 'alerts.success', p: 3 }}>\n            Thanks for contacting us!\n          </p>\n        )}\n        {netlify.error && (\n          <p sx={{ variant: 'alerts.muted', p: 3 }}>\n            Sorry, we could not reach our servers. Please try again later.\n          </p>\n        )}\n        <div>\n          <label htmlFor='email' sx={{ variant: 'forms.label' }}>\n            Email:\n          </label>\n          <input\n            type='email'\n            name='email'\n            id='email'\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n            sx={{\n              variant: 'forms.input'\n            }}\n          />\n          {touched.email && errors.email ? (\n            <div sx={{ variant: 'text.error' }}>{errors.email}</div>\n          ) : null}\n        </div>\n        <div sx={{ pt: 3 }}>\n          <button type='submit' sx={{ variant: 'buttons.success' }}>\n            Submit\n          </button>\n          <button type='reset' sx={{ variant: 'buttons.danger' }}>\n            Reset\n          </button>\n        </div>\n      </NetlifyFormComponent>\n    </NetlifyFormProvider>\n  )\n}\n")))}a.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-examples-formik-mdx-7b30fc0636f680f79f00.js.map