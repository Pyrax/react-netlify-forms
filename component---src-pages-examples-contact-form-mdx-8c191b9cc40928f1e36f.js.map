{"version":3,"file":"component---src-pages-examples-contact-form-mdx-8c191b9cc40928f1e36f.js","mappings":"6QAOaA,EAAe,CAC1B,MAAS,wBAELC,EAAc,CAClBD,aAAAA,GAGa,SAASE,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,QALS,UAKT,iBAAeH,EAAiBG,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAC5E,cACE,GAAM,gBADR,iBAGA,kFACA,oBAAK,gBAAMC,WAAW,MAClB,UAAa,eADZ,mEAIL,2CAA6B,sBAAYA,WAAW,KAAvB,eAA7B,+KAAmQ,sBAAYA,WAAW,KAAvB,MAAnQ,2BACA,oBAAK,gBAAMA,WAAW,MAClB,UAAa,eACb,WAAc,OACd,MAAQ,GAHP,skDAkER,CAEDJ,EAAWK,gBAAiB,C","sources":["webpack://react-netlify-forms-www/./src/pages/examples/contact-form.mdx"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nexport const _frontmatter = {\n  \"title\": \"Contact form example\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n    <h1 {...{\n      \"id\": \"contact-form\"\n    }}>{`Contact form`}</h1>\n    <p>{`First, import required components in your class or function:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { NetlifyForm, Honeypot } from 'react-netlify-forms'\n`}</code></pre>\n    <p>{`Then, you can use the `}<inlineCode parentName=\"p\">{`NetlifyForm`}</inlineCode>{` component in place of the standard form tag. It will provide you form handlers, which manage submitting data to Netlify. Play around and modify this interactive example (`}<inlineCode parentName=\"p\">{`sx`}</inlineCode>{` is used for styling):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"live\",\n        \"live\": true\n      }}>{`<NetlifyForm\n  name='Contact'\n  action='/thanks'\n  honeypotName='bot-field'\n  onSuccess={(response, context) => {\n    console.log('Successfully sent form data to Netlify Server')\n    context.formRef.current.reset()\n  }}\n>\n  {({ handleChange, success, error }) => (\n    <>\n      <Honeypot />\n      {success && (\n        <p sx={{ variant: 'alerts.success', p: 3 }}>\n          Thanks for contacting us!\n        </p>\n      )}\n      {error && (\n        <p sx={{ variant: 'alerts.muted', p: 3 }}>\n          Sorry, we could not reach servers. Because it only works on Netlify,\n          our GitHub demo does not provide a response.\n        </p>\n      )}\n      <div>\n        <label htmlFor='name' sx={{ variant: 'forms.label' }}>\n          Name:\n        </label>\n        <input\n          type='text'\n          name='name'\n          id='name'\n          onChange={handleChange}\n          sx={{ variant: 'forms.input' }}\n        />\n      </div>\n      <div sx={{ pt: 2 }}>\n        <label htmlFor='message' sx={{ variant: 'forms.label' }}>\n          Message:\n        </label>\n        <textarea\n          type='text'\n          name='message'\n          id='message'\n          rows='4'\n          onChange={handleChange}\n          sx={{ variant: 'forms.textarea' }}\n        />\n      </div>\n      <div sx={{ pt: 3 }}>\n        <button type='submit' sx={{ variant: 'buttons.success' }}>\n          Submit\n        </button>\n        <button type='reset' sx={{ variant: 'buttons.danger' }}>\n          Reset\n        </button>\n      </div>\n    </>\n  )}\n</NetlifyForm>\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"sourceRoot":""}