"use strict";(self.webpackChunkreact_netlify_forms_www=self.webpackChunkreact_netlify_forms_www||[]).push([[439],{92190:function(n,e,t){t.r(e),t.d(e,{_frontmatter:function(){return s},default:function(){return l}});var a=t(63366),o=(t(27378),t(64983)),r=["components"],s={title:"Contact form example"},i={_frontmatter:s};function l(n){var e=n.components,t=(0,a.Z)(n,r);return(0,o.kt)("wrapper",Object.assign({},i,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"contact-form"},"Contact form"),(0,o.kt)("h2",{id:"get-started"},"Get started"),(0,o.kt)("p",null,"First, import required components in your class or function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { NetlifyForm, Honeypot } from 'react-netlify-forms'\n")),(0,o.kt)("p",null,"Then, you can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"NetlifyForm")," component in place of the standard form tag. It will provide you form handlers, which manage submitting data to Netlify. Play around and modify this interactive example (",(0,o.kt)("inlineCode",{parentName:"p"},"sx")," is used for styling):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<NetlifyForm\n  name='Contact'\n  action='/thanks'\n  honeypotName='bot-field'\n  onSuccess={(response, context) => {\n    console.log('Successfully sent form data to Netlify Server')\n    context.formRef.current.reset()\n  }}\n>\n  {({ handleChange, success, error }) => (\n    <>\n      <Honeypot />\n      {success && (\n        <p sx={{ variant: 'alerts.success', p: 3 }}>\n          Thanks for contacting us!\n        </p>\n      )}\n      {error && (\n        <p sx={{ variant: 'alerts.muted', p: 3 }}>\n          Sorry, we could not reach servers. Because it only works on Netlify,\n          our GitHub demo does not provide a response.\n        </p>\n      )}\n      <div>\n        <label htmlFor='name' sx={{ variant: 'forms.label' }}>\n          Name:\n        </label>\n        <input\n          type='text'\n          name='name'\n          id='name'\n          onChange={handleChange}\n          sx={{ variant: 'forms.input' }}\n        />\n      </div>\n      <div sx={{ pt: 2 }}>\n        <label htmlFor='message' sx={{ variant: 'forms.label' }}>\n          Message:\n        </label>\n        <textarea\n          type='text'\n          name='message'\n          id='message'\n          rows='4'\n          onChange={handleChange}\n          sx={{ variant: 'forms.textarea' }}\n        />\n      </div>\n      <div sx={{ pt: 3 }}>\n        <button type='submit' sx={{ variant: 'buttons.success' }}>\n          Submit\n        </button>\n        <button type='reset' sx={{ variant: 'buttons.danger' }}>\n          Reset\n        </button>\n      </div>\n    </>\n  )}\n</NetlifyForm>\n")),(0,o.kt)("h2",{id:"using-context"},"Using context"),(0,o.kt)("p",null,"Now, that we know how to quickly build a form, let us take a closer look at how we can get control over the form.\nThis is where context jumps in. Actually, we already used it. We consumed it as children of ",(0,o.kt)("inlineCode",{parentName:"p"},"NetlifyForm")," to get access to state and form handlers.\nWe could also use it to access ",(0,o.kt)("inlineCode",{parentName:"p"},"formRef")," and manually reset the form as this example shows:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<NetlifyForm name='Contact' action='/thanks' honeypotName='bot-field'>\n  {({ handleChange, formRef }) => (\n    <div sx={{ variant: 'forms.inline' }}>\n      <input\n        type='text'\n        name='name'\n        id='name'\n        onChange={handleChange}\n        sx={{ variant: 'forms.inlineInput' }}\n      />\n      {/* This button, for example, uses the context to access formRef and then\n       ** programmatically reset this form. */}\n      <button\n        type='button'\n        sx={{ variant: 'buttons.danger' }}\n        onClick={() => formRef.current.reset()}\n      >\n        Custom reset button\n      </button>\n    </div>\n  )}\n</NetlifyForm>\n")),(0,o.kt)("p",null,"Same example, without destructuring, makes it clear where we access the context:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:"live",live:!0},"<NetlifyForm name='Contact' action='/thanks' honeypotName='bot-field'>\n  {(context) => (\n    <div sx={{ variant: 'forms.inline' }}>\n      <input\n        type='text'\n        name='name'\n        id='name'\n        onChange={context.handleChange}\n        sx={{ variant: 'forms.inlineInput' }}\n      />\n      <button\n        type='button'\n        sx={{ variant: 'buttons.danger' }}\n        onClick={() => context.formRef.current.reset()}\n      >\n        Custom reset button\n      </button>\n    </div>\n  )}\n</NetlifyForm>\n")),(0,o.kt)("p",null,"Head over to the docs for a ",(0,o.kt)("a",{parentName:"p",href:"/react-netlify-forms/docs/#netlifyformcontext"},"complete list of context variables"),"."))}l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-examples-contact-form-mdx-4a39c1cfaa7d2dc20315.js.map